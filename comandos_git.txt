################# COMANDOS GIT #################

1 - PROMPT DE COMANDO PARA VERIFICAR INSTALÇÃO
git --help

2 - BOTÃO DIREITO NA PASTA DO PRJETO NO PC + GIT BASH HERE

3 - NA JANELA EXECUTAR O COMANDO
git init

4 - VERIFICAR ARQUIVOS QUE ESTÃO NO DIRETORIO E SUAS VERSOES
git status

5 - INCLUIR ARQUIVO AO CONTROLE DE VERSÃO
git add "nome_do_arquivo.extensão"

6 - INCLUIR VÁRIOS ARQUIVOS NO CONTROLE DE VERSÃO
git add . (após o add é espaço, ponto e enter para executar o código)
git status - para ver se o código rodou certo

7 - CRIANDO A PRIMEIRA VERSÃO
git commit -m "comentário sobre a versão entre as aspas"

8 - CRIANDO RELAÇÃO COM O GITHUB
git config --global user.email "email@dogithub.com"
git config --global user.name "Seu Nome"

9 - ENVIANDO VERSÃO PARA SERVIDOR NA NUVEM
NO GITHUB:
 - + new repository
 - nomear repositorio
 - colocar descrição
 - deixar publico se o código form para protifolio ou privado se for de interesse comercial
 - marcar add a readme file 
 - creating repository
 - após a criação pegar o link do navegador

NA JANELA DO GIT:
git remote add origin colar o link
git push
git push --set-upstream origin master

sign in with your browser - autorizar

10 - ATUALIZAÇÕES DE CÓDIGOS
PRIMEIRAMENTE DEVEMOS MODIFICAR O ARQUIVO DEPOS RODAR O CÓDIGO ABAIXO
git status - vai indicar que um arquivo foi modificado
git add . - vai adicionar o arquivo modificado
git status - vai mostrar que o arquivo foi adicionado
git commit -m "descrever a modificação"
git push - atualizações enviadas para o controle de versão

11 - HISTORICO DE ATUALIZAÇÕES
git reflog

12 - VOLTAR PARA VERSÃO ANTERIOR DO CÓDIGO E/OU PERMITE NAVEGAR PELAS VERSÕES
git reset --hard ID da versão (O ID é fornecido pelo comando git reflog (conjunto de numeros e letras em amarelo))

13 - BRANCHES (Podemos ter uma branch principal (master) onde apenas codigos testados e funcionais são depositados.
E podemos também ter outras branches auxiliares, prinicplamente quando o trabalho é feito em equipe).
git branch - Ver Branches disponiveis
git branch staging - Criando e nomeando como staging uma nova branch (auxiliar)
git checkout -b nome da branch de origem nome da nova brench - permite mudar e criar uma nova branch com base em outra
git checkout staging - muda da branch master para branch staging
git push --set-upstream origin staging - upload da branch para nuvem

14 - MERGE - SALVANDO CODIGOS NA BRANCH MASTER
git checkout master
git branch - vai mostrar qual branch vc está
git pull - vai trazer as atualizações do servidor para a maquina
git merge staging
git push

exemplo : https://youtu.be/kB5e-gTAl_s?t=2277


15 - PULL REQUEST - COLOCAR SEUS CODIGOS SOB ÁNALISE DE TERCEIROS
APÓS ALTERAR O ARRQUIVO E SALVAR NO STAGING
VÁ PARA O GITHUB
CLICAR EM COMPARE & PULL REQUEST
COMPARING CHANGES
BASE: MASTES <---- COMPARE: NOME_DO_CÓDIGO
COLOCAR AS INFORMAÇÕES ESPECIFICAS E CLICAR EM CREATE PULL REQUEST

16 - GIT IGNORE (NÃO ENVIAR TODOS OS ARQUIVOS DA PASTA)
touch .gitignore - cria um arquivo de texto na pasta (NOTEPAD) onde vc deve elencar as pastas e arquivos que 
não devem ser upados.
































